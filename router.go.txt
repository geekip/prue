package prue

import (
	"net/http"

	"github.com/geekip/mux"
)

type (
	Handler    func(ctx *Context)
	Middleware func(ctx *Context, next Handler)
	Router     struct {
		mux         *mux.Mux
		middlewares []Middleware
	}
)

func NewRouter() *Router {
	return &Router{mux: mux.New()}
}

func (r *Router) Group(pattern string) *Router {
	return &Router{
		mux:         r.mux.Group(pattern),
		middlewares: r.middlewares,
	}
}

func (r *Router) Use(middleware ...Middleware) *Router {
	r.middlewares = append(r.middlewares, middleware...)
	return r
}

func (r *Router) handle(method, pattern string, handler Handler) *Router {
	h := func(w http.ResponseWriter, req *http.Request) {
		ctx := newContext(w, req)
		ctx.Params = mux.Params(req)
		defer ctx.release()

		finalHandler := handler
		for i := len(r.middlewares) - 1; i >= 0; i-- {
			mw := r.middlewares[i]
			next := finalHandler
			finalHandler = func(c *Context) { mw(c, next) }
		}
		finalHandler(ctx)
	}

	r.mux.Method(method).Handle(pattern, http.HandlerFunc(h))
	return r
}

func (r *Router) NotFoundHandler(handler Handler) *Router {
	r.mux.NotFoundHandler(func(w http.ResponseWriter, req *http.Request) {
		handler(newContext(w, req))
	})
	return r
}

func (r *Router) InternalErrorHandler(handler Handler) *Router {
	r.mux.InternalErrorHandler(func(w http.ResponseWriter, req *http.Request, err interface{}) {
		handler(newContext(w, req))
	})
	return r
}

func (r *Router) MethodNotAllowedHandler(handler Handler) *Router {
	r.mux.MethodNotAllowedHandler(func(w http.ResponseWriter, req *http.Request) {
		handler(newContext(w, req))
	})
	return r
}

func (r *Router) PanicHandler(handler func(error)) *Router {
	r.mux.PanicHandler(handler)
	return r
}

func (r *Router) ServeHTTP(w http.ResponseWriter, req *http.Request) {
	r.mux.ServeHTTP(w, req)
}

func (r *Router) GET(pattern string, handler Handler) *Router {
	return r.handle(http.MethodGet, pattern, handler)
}

func (r *Router) POST(pattern string, handler Handler) *Router {
	return r.handle(http.MethodPost, pattern, handler)
}

func (r *Router) PUT(pattern string, handler Handler) *Router {
	return r.handle(http.MethodPut, pattern, handler)
}

func (r *Router) DELETE(pattern string, handler Handler) *Router {
	return r.handle(http.MethodDelete, pattern, handler)
}

func (r *Router) PATCH(pattern string, handler Handler) *Router {
	return r.handle(http.MethodPatch, pattern, handler)
}
